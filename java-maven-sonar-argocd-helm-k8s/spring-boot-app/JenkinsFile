pipeline {
    agent {
        docker {
            image 'venkat1451/eclipse-venkat-docker-agent:v3'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONAR_URL = "http://54.234.14.79:9000"
        DOCKER_IMAGE = "venkat1451/ultimate-cicd:${BUILD_NUMBER}"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "Venkateswaran1451"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Venkateswaran1451/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package -DskipTests'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            agent { label 'master' } // must run on master to ensure Git works
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh '''
                            echo "Running on: $(hostname)"
                            echo "Current directory: $(pwd)"

                            # Configure Git
                            git config --global user.email "venkatesmem@gmail.com"
                            git config --global user.name "Venkateswaran1451"

                            # Ensure repo is checked out on this node
                            if [ ! -d ".git" ]; then
                                git clone https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git .
                            fi

                            git checkout main || git checkout -b main
                            git fetch origin
                            git reset --hard origin/main

                            # Update deployment file
                            DEPLOY_FILE="java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml"
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" $DEPLOY_FILE

                            git add $DEPLOY_FILE
                            if ! git diff --cached --quiet; then
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git remote set-url origin https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                                git push origin HEAD:main --quiet
                            else
                                echo "No changes to commit"
                            fi
                        '''
                    }
                }
            }
        }
    } // end stages
} // end pipeline
